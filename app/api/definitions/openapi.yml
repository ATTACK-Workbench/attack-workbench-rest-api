openapi: '3.0.3'
info:
  title: 'ATT&CK Workbench REST API'
  version: '0.0.1'
servers:
  - url: '{protocol}://{hostname}:{port}/'
    variables:
      protocol:
        default: 'http'
      hostname:
        default: 'localhost'
      port:
        default: '3000'
tags:
  - name: 'Techniques'
    description: 'Operations on techniques.'
  - name: 'Tactics'
    description: 'Operations on tactics.'
  - name: 'Groups'
    description: 'Operations on groups.'
  - name: 'Collection Indexes'
    description: 'Operations on collection indexes'
paths:
  /api/techniques:
    get:
      summary: 'Get a list of techniques'
      operationId: 'technique-get-all'
      description: |
        This endpoint gets a list of techniques from the workspace.
        The list of techniques may include multiple versions of each technique.
      tags:
        - 'Techniques'
      parameters:
        - name: limit
          in: query
          description: |
            The number of techniques to retrieve.
            The default (0) will retrieve all techniques.
          schema:
            type: number
            default: 0
        - name: offset
          in: query
          description: |
            The number of techniques to skip.
          schema:
            type: number
            default: 0
        - name: state
          in: query
          description: |
            State of the object in the editing workflow.
          schema:
            type: string
          example: 'work-in-progress'
        - name: revoked
          in: query
          description: |
            Whether the object has been revoked.
          schema:
            type: boolean
        - name: deprecated
          in: query
          description: |
            Whether the object has been deprecated.
          schema:
            type: boolean
      responses:
        '200':
          description: 'A list of techniques.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'techniques.yml#/components/schemas/technique'

    post:
      summary: 'Create a technique'
      operationId: 'technique-create'
      description: |
        This endpoint creates a new technique in the workspace.
        If the `stix.id` property is set, it creates a new version of an existing technique.
        If the `stix.id` property is not set, it creates a new technique, generating a STIX id for it.
      tags:
        - 'Techniques'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'techniques.yml#/components/schemas/technique'
      responses:
        '201':
          description: 'The technique has been successfully created.'
          content:
            application/json:
              schema:
                $ref: 'techniques.yml#/components/schemas/technique'
        '400':
          description: 'Missing or invalid parameters were provided. The technique was not created.'
        '409':
          description: 'Duplicate `stix.id` and `stix.modified` properties. The technique was not created.'

  /api/techniques/{stixId}:
    get:
      summary: 'Get one or more versions of a technique'
      operationId: 'technique-get-one-id'
      description: |
        This endpoint gets a list of one or more versions of a technique from the workspace, identified by their STIX id.
      tags:
        - 'Techniques'
      parameters:
        - name: stixId
          in: path
          description: 'STIX id of the technique to retrieve'
          required: true
          schema:
            type: string
        - name: versions
          in: query
          description: |
            The versions of the technique to retrieve.
            `all` gets all versions of the technique, `latest` gets only the latest version.
          schema:
            type: string
            enum:
              - all
              - latest
            default: latest
      responses:
        '200':
          description: 'A list of techniques matching the requested STIX id.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'techniques.yml#/components/schemas/technique'

  /api/techniques/{stixId}/modified/{modified}:
    get:
      summary: 'Gets the version of a technique matching the STIX id and modified date'
      operationId: 'technique-get-by-id-and-modified'
      description: |
        This endpoint gets a single version of a technique from the workspace, identified by its STIX id and modified date.
      tags:
        - 'Techniques'
      parameters:
        - name: stixId
          in: path
          description: 'STIX id of the technique to retrieve'
          required: true
          schema:
            type: string
        - name: modified
          in: path
          description: 'modified date of the technique to retrieve'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'The version of a technique matching the STIX id and modified date.'
          content:
            application/json:
              schema:
                $ref: 'techniques.yml#/components/schemas/technique'
        '404':
          description: 'A technique with the requested STIX id and modified date was not found.'
    put:
      summary: 'Update a technique'
      operationId: 'technique-update'
      description: |
        This endpoint updates a single version of a technique in the workspace, identified by its STIX id and modified date.
      tags:
        - 'Techniques'
      parameters:
        - name: stixId
          in: path
          description: 'STIX id of the technique to update'
          required: true
          schema:
            type: string
        - name: modified
          in: path
          description: 'modified date of the technique to update'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'techniques.yml#/components/schemas/technique'
      responses:
        '200':
          description: 'The technique was updated.'
          content:
            application/json:
              schema:
                $ref: 'techniques.yml#/components/schemas/technique'
        '400':
          description: 'Missing or invalid parameters were provided. The technique was not updated.'
        '404':
          description: 'A technique with the requested STIX id and modified date was not found.'
    delete:
      summary: 'Delete a technique'
      operationId: 'technique-delete'
      description: |
        This endpoint deletes a single version of a technique from the workspace.
        The technique is identified by its STIX id and modified date.
      tags:
        - 'Techniques'
      parameters:
        - name: stixId
          in: path
          description: 'STIX id of the technique to delete'
          required: true
          schema:
            type: string
        - name: modified
          in: path
          description: 'modified date of the technique to delete'
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'The technique was successfully deleted.'
        '404':
          description: 'A technique with the requested STIX id and modified date was not found.'

  /api/tactics:
    get:
      summary: 'Get a list of tactics'
      operationId: 'tactic-get-all'
      description: |
        This endpoint gets a list of tactics from the workspace.
        The list of tactics may include multiple versions of each tactic.
      tags:
        - 'Tactics'
      responses:
        '200':
          description: 'A list of tactics.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'tactics.yml#/components/schemas/tactic'

    post:
      summary: 'Create a tactic'
      operationId: 'tactic-create'
      description: |
        This endpoint creates a new tactic in the workspace.
        If the `stix.id` property is set, it creates a new version of an existing tactic.
        If the `stix.id` property is not set, it creates a new tactic, generating a STIX id for it.
      tags:
        - 'Tactics'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'tactics.yml#/components/schemas/tactic'
      responses:
        '201':
          description: 'The tactic has been successfully created.'
          content:
            application/json:
              schema:
                $ref: 'tactics.yml#/components/schemas/tactic'
        '400':
          description: 'Missing or invalid parameters were provided. The tactic was not created.'
        '409':
          description: 'Duplicate `stix.id` and `stix.modified` properties. The tactic was not created.'

  /api/tactics/{stixId}:
    get:
      summary: 'Get one or more versions of a tactic'
      operationId: 'tactic-get-one-id'
      description: |
        This endpoint gets a list of one or more versions of a tactic from the workspace, identified by their STIX id.
      tags:
        - 'Tactics'
      parameters:
        - name: stixId
          in: path
          description: 'STIX id of the tactic to retrieve'
          required: true
          schema:
            type: string
        - name: versions
          in: query
          description: |
            The versions of the tactic to retrieve.
            `all` gets all versions of the tactic, `latest` gets only the latest version.
          schema:
            type: string
            enum:
              - all
              - latest
            default: latest
      responses:
        '200':
          description: 'A list of tactics matching the requested STIX id.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'tactics.yml#/components/schemas/tactic'

  /api/tactics/{stixId}/modified/{modified}:
    get:
      summary: 'Gets the version of a tactic matching the STIX id and modified date'
      operationId: 'tactic-get-by-id-and-modified'
      description: |
        This endpoint gets a single version of a tactic from the workspace, identified by its STIX id and modified date.
      tags:
        - 'Tactics'
      parameters:
        - name: stixId
          in: path
          description: 'STIX id of the tactic to retrieve'
          required: true
          schema:
            type: string
        - name: modified
          in: path
          description: 'modified date of the tactic to retrieve'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'The version of a tactic matching the STIX id and modified date.'
          content:
            application/json:
              schema:
                $ref: 'tactics.yml#/components/schemas/tactic'
        '404':
          description: 'A tactic with the requested STIX id and modified date was not found.'
    put:
      summary: 'Update a tactic'
      operationId: 'tactic-update'
      description: |
        This endpoint updates a single version of a tactic in the workspace, identified by its STIX id and modified date.
      tags:
        - 'Tactics'
      parameters:
        - name: stixId
          in: path
          description: 'STIX id of the tactic to update'
          required: true
          schema:
            type: string
        - name: modified
          in: path
          description: 'modified date of the tactic to update'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'tactics.yml#/components/schemas/tactic'
      responses:
        '200':
          description: 'The tactic was updated.'
          content:
            application/json:
              schema:
                $ref: 'tactics.yml#/components/schemas/tactic'
        '400':
          description: 'Missing or invalid parameters were provided. The tactic was not updated.'
        '404':
          description: 'A tactic with the requested STIX id and modified date was not found.'
    delete:
      summary: 'Delete a tactic'
      operationId: 'tactic-delete'
      description: |
        This endpoint deletes a single version of a tactic from the workspace.
        The tactic is identified by its STIX id and modified date.
      tags:
        - 'Tactics'
      parameters:
        - name: stixId
          in: path
          description: 'STIX id of the tactic to delete'
          required: true
          schema:
            type: string
        - name: modified
          in: path
          description: 'modified date of the tactic to delete'
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'The tactic was successfully deleted.'
        '404':
          description: 'A tactic with the requested STIX id and modified date was not found.'

  /api/groups:
    get:
      summary: 'Get a list of groups'
      operationId: 'group-get-all'
      description: |
        This endpoint gets a list of groups from the workspace.
        The list of groups may include multiple versions of each group.
      tags:
        - 'Groups'
      responses:
        '200':
          description: 'A list of groups.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'groups.yml#/components/schemas/group'

    post:
      summary: 'Create a group'
      operationId: 'group-create'
      description: |
        This endpoint creates a new group in the workspace.
        If the `stix.id` property is set, it creates a new version of an existing group.
        If the `stix.id` property is not set, it creates a new group, generating a STIX id for it.
      tags:
        - 'Groups'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'groups.yml#/components/schemas/group'
      responses:
        '201':
          description: 'The group has been successfully created.'
          content:
            application/json:
              schema:
                $ref: 'groups.yml#/components/schemas/group'
        '400':
          description: 'Missing or invalid parameters were provided. The group was not created.'
        '409':
          description: 'Duplicate `stix.id` and `stix.modified` properties. The group was not created.'

  /api/groups/{stixId}:
    get:
      summary: 'Get one or more versions of a group'
      operationId: 'group-get-one-id'
      description: |
        This endpoint gets a list of one or more versions of a group from the workspace, identified by their STIX id.
      tags:
        - 'Groups'
      parameters:
        - name: stixId
          in: path
          description: 'STIX id of the group to retrieve'
          required: true
          schema:
            type: string
        - name: versions
          in: query
          description: |
            The versions of the group to retrieve.
            `all` gets all versions of the group, `latest` gets only the latest version.
          schema:
            type: string
            enum:
              - all
              - latest
            default: latest
      responses:
        '200':
          description: 'A list of groups matching the requested STIX id.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'groups.yml#/components/schemas/group'

  /api/groups/{stixId}/modified/{modified}:
    get:
      summary: 'Gets the version of a group matching the STIX id and modified date'
      operationId: 'group-get-by-id-and-modified'
      description: |
        This endpoint gets a single version of a group from the workspace, identified by its STIX id and modified date.
      tags:
        - 'Groups'
      parameters:
        - name: stixId
          in: path
          description: 'STIX id of the group to retrieve'
          required: true
          schema:
            type: string
        - name: modified
          in: path
          description: 'modified date of the group to retrieve'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'The version of a group matching the STIX id and modified date.'
          content:
            application/json:
              schema:
                $ref: 'groups.yml#/components/schemas/group'
        '404':
          description: 'A group with the requested STIX id and modified date was not found.'
    put:
      summary: 'Update a group'
      operationId: 'group-update'
      description: |
        This endpoint updates a single version of a group in the workspace, identified by its STIX id and modified date.
      tags:
        - 'Groups'
      parameters:
        - name: stixId
          in: path
          description: 'STIX id of the group to update'
          required: true
          schema:
            type: string
        - name: modified
          in: path
          description: 'modified date of the group to update'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'groups.yml#/components/schemas/group'
      responses:
        '200':
          description: 'The group was updated.'
          content:
            application/json:
              schema:
                $ref: 'groups.yml#/components/schemas/group'
        '400':
          description: 'Missing or invalid parameters were provided. The group was not updated.'
        '404':
          description: 'A group with the requested STIX id and modified date was not found.'
    delete:
      summary: 'Delete a group'
      operationId: 'group-delete'
      description: |
        This endpoint deletes a single version of a group from the workspace.
        The group is identified by its STIX id and modified date.
      tags:
        - 'Groups'
      parameters:
        - name: stixId
          in: path
          description: 'STIX id of the group to delete'
          required: true
          schema:
            type: string
        - name: modified
          in: path
          description: 'modified date of the group to delete'
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'The group was successfully deleted.'
        '404':
          description: 'A group with the requested STIX id and modified date was not found.'

  /api/collection-indexes:
    get:
      summary: 'Get a list of collection indexes'
      operationId: 'collection-indexes-get-all'
      description: |
        This endpoint gets a list of collection indexes from the workspace.
        Only the latest version of a collection index is stored.
      tags:
        - 'Collection Indexes'
      parameters:
        - name: limit
          in: query
          description: |
            The number of collection indexes to retrieve.
            The default (0) will retrieve all collection indexes.
          schema:
            type: number
            default: 0
        - name: offset
          in: query
          description: |
            The number of collection indexes to skip.
          schema:
            type: number
            default: 0
      responses:
        '200':
          description: 'A list of collection indexes.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'collection-indexes.yml#/components/schemas/collection-index-wrapper'
    post:
      summary: 'Create a collection index'
      operationId: 'collection-index-create'
      description: |
        This endpoint creates a new collection index in the workspace.
      tags:
        - 'Collection Indexes'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'collection-indexes.yml#/components/schemas/collection-index-wrapper'
      responses:
        '201':
          description: 'The collection index has been successfully created.'
          content:
            application/json:
              schema:
                $ref: 'collection-indexes.yml#/components/schemas/collection-index-wrapper'
        '400':
          description: 'Missing or invalid parameters were provided. The collection index was not created.'

  /api/collection-indexes/{id}:
    get:
      summary: 'Get collection index'
      operationId: 'collection-index-get-by-id'
      description: |
        This endpoint gets collection index from the workspace, identified by its id.
      tags:
        - 'Collection Indexes'
      parameters:
        - name: id
          in: path
          description: 'id of the collection index to retrieve'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'A list of collection indexes matching the requested id.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'collection-indexes.yml#/components/schemas/collection-index-wrapper'
    put:
      summary: 'Update a collection index'
      operationId: 'collection-index-update'
      description: |
        This endpoint updates a single collection index in the workspace, identified by its id.
      tags:
        - 'Collection Indexes'
      parameters:
        - name: id
          in: path
          description: 'id of the collection index to update'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'collection-indexes.yml#/components/schemas/collection-index-wrapper'
      responses:
        '200':
          description: 'The collection index was updated.'
          content:
            application/json:
              schema:
                $ref: 'collection-indexes.yml#/components/schemas/collection-index-wrapper'
        '400':
          description: 'Missing or invalid parameters were provided. The collection index was not updated.'
        '404':
          description: 'A collection index with the requested id was not found.'
    delete:
      summary: 'Delete a collection index'
      operationId: 'collection-index-delete'
      description: |
        This endpoint deletes a single collection index from the workspace.
        The collection index is identified by its id.
      tags:
        - 'Collection Indexes'
      parameters:
        - name: id
          in: path
          description: 'id of the collection index to delete'
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'The collection index was successfully deleted.'
        '404':
          description: 'A collection index with the requested id was not found.'

components:
  schemas:
    editor_identity:
      type: object
      description: 'This property replaces mitreId'
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
